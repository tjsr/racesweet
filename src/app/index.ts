import { BrowserWindow, app, ipcMain } from 'electron';
import {
  ReadContentErrorIpcReceiveChannel,
  ReadContentIpcReceiveChannel,
  RequestReadIpcSendChannel,
  RequestWriteIpcSendChannel,
  WriteContentErrorIpcReceiveChannel,
  WriteContentIpcReceiveChannel
} from '../model/electronIpc';
import { readFile, writeFile } from 'node:fs/promises';

import path from 'node:path';

// import ('electron-squirrel-startup').catch(() => {
//   app.quit();
// });

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    width: 800,
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', (): void => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', (): void => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.on(RequestReadIpcSendChannel, (event: Electron.IpcMainEvent, filename: string, eventId: string): void => {
  // const fs = require('fs');
  // const path = require('path');
  const filePath = path.join(__dirname, filename);
  
  readFile(filePath, 'utf8').then((data: string) => {
    event.reply(ReadContentIpcReceiveChannel, eventId, data);
  }).catch((error: Error) => {
    // Handle the error, e.g., file not found or read error
    console.error(`Error reading file ${filename}:`, error);
    // Send a reply back to the renderer process with the error.
    // It might be safer for some events to not send details of the exception.
    // You need to implement sendReadError in preload.ts if you're going to handle
    // errors differently from the 'sendReadContent' event.
    event.reply(ReadContentErrorIpcReceiveChannel, eventId, error.message);
  });
  // event.reply('sendReadContent', filename, data);
});

ipcMain.on(RequestWriteIpcSendChannel, (event: Electron.IpcMainEvent, filename: string, eventId: string, contents: string) => {
  // Use __dirname if you're trying to restrict where things can be written to.
  // You need to handle permissions and security based on what you want to allow to be written.
  // I'd probably re-write this to take PathLike.
  const fullPath = path.join(__dirname, filename);

  writeFile(fullPath, contents).then(() => {
    event.returnValue = `File ${filename} written successfully.`;
    event.reply(WriteContentIpcReceiveChannel, eventId);
  }).catch((error: Error) => {
    event.reply(WriteContentErrorIpcReceiveChannel, eventId, error.message);
  });
});
